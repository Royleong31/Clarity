import hre, {ethers} from 'hardhat';

// Deployment Helpers:
import {deploy, getContractAt} from '../utils/helpers';
// ABI
import {Test} from '../../typechain-types';
import {ZERO_ADDRESS} from '../utils/const';
import {encodeData} from '../utils/sign';

async function main() {
  const [deployer] = await hre.ethers.getSigners();
  console.log('[DEPLOYER ADDRESS]:', deployer.address);

  const signal = '0x1234567890123456789012345678901234567890'; // Example address for signal
  const root = '1234567890123456789012345678901234567890123456789012345678901234'; // Example uint256 for root
  const nullifierHash = '1234567890123456789012345678901234567890123456789012345678901234'; // Example uint256 for nullifierHash
  const proof = [
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
    '1234567890123456789012345678901234567890123456789012345678901234',
  ]; // Example uint256[8] for proof

  // Define the types of the parameters in the ABI format
  const types = [
    'address', // signal
    'uint256', // root
    'uint256', // nullifierHash
    'uint256[8]', // proof
  ];

  // Encode the parameters
  const encodedProof = ethers.utils.defaultAbiCoder.encode(types, [signal, root, nullifierHash, proof]);

  console.log('Encoded Data:', encodedProof);
  const review = {
    ratings: 5,
    comment: 'hello world',
  };
  const encodedReview = encodeData(['uint256', 'string'], [review.ratings, review.comment]);
  // Sepolia
  const SIGN_PROTOCOL_SEPOLIA = '0x878c92FD89d8E0B93Dc0a3c907A2adc7577e39c5';
  //   const attestor = await deploy<Test>(deployer, 'Test', [SIGN_PROTOCOL_SEPOLIA], true);

  //   const workingReview = '0x8d1be8750000000000000000000000000000000000000000000000000000000000000253';
  const workingReview =
    '0x00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000';
  const TEST = '0x28b803002Ed2Cd61D1DC67914559400998689052';
  const attestor = await getContractAt<Test>('Test', TEST);

  const tx = await attestor.attestReviewTest1(workingReview);
  //   await tx.wait();
  console.log('TEST Project Attestor Deployed!');

  /*
WORKING REVIEW: 0x8d1be8750000000000000000000000000000000000000000000000000000000000000253
WORKING PROOF BYTES: 0x00000000000000000000000012345678901234567890123456789012345678900000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff20000000000030046030f26f462d7ac21a27eb9d53fff233c7acd12d87e96aff2
  */
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
